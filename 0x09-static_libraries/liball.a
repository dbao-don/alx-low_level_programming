!<arch>
0-isupper.c/    0           0     0     644     226       `
#include "main.h"
/**
 * _isupper - A function that checks
 * for uppercase character.
 * @c: value to check
 * Return: 0 or 1
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     305       `
#include "main.h"
/**
 * _memset - a function that fills
 * memory with a constant byte.
 * @s: address to point at
 * @b: constant bytes to be used
 * @n: bytes to fill
 * Return: s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	for (; i < n; i++)
		s[i] = b;
	return (s);
}

0-strcat.c/     0           0     0     644     340       `
#include "main.h"

/**
 * _strcat - a function that
 * concatenates two strings
 * @dest: pointer to be appended
 * @src: pointer to append
 * Return: char
 */

char *_strcat(char *dest, char *src)
{
	char *result = dest;

	while (*dest != '\0')
		dest++;
	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}

	return (result);
}
100-atoi.c/     0           0     0     644     493       `
#include "main.h"
/**
 * _atoi - a function that
 * converts a string to an integer
 * @s: pointer to a string
 * Return: integer
 */
int _atoi(char *s)
{
        int i = 1;
        unsigned int j = 0;

        do {
                if (*s == '-')
                        i *= -1;
                else if (*s >= '0' && *s <= '9')
                        j = (j * 10) + (*s - '0');
                else if (j > 0)
                        break;
        } while (*s++);
        return (j * i);
}

1-isdigit.c/    0           0     0     644     218       `
#include "main.h"
/**
 * _isdigit - A function that
 * that checks for a digit
 * @c: value to check
 * Return: 0 or 1
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     312       `
#include "main.h"
/**
 * _memcpy - a function that
 * copies memory area.
 * @dest: pointer to destination
 * @src: pointer to source
 * @n: size of byte to be copied
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *ptr = dest;

	while (n--)
		*ptr++ = *src++;
	return (dest);
}
1-strncat.c/    0           0     0     644     410       `
#include "main.h"

/**
 * _strncat - a function that
 * concatenates two strings
 * @dest: pointer to be appended
 * @src: pointer to append
 * @n: size of bytes to be used
 * Return: char
 */

char *_strncat(char *dest, char *src, int n)
{
	char *result = dest;
	int i = 0;

	while (*dest != '\0')
		dest++;

	while (*src != '\0' && i < n)
	{
		*dest = *src;
		dest++;
		src++;
		i++;
	}

	return (result);
}
2-strchr.c/     0           0     0     644     330       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - a funtion that locates
 * a character in a string.
 * @s: pointer to a string.
 * @c: character to locate
 * Return: s or NULL
 */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		s++;
	}
	if (c == '\0')
		return (s);
	return (NULL);
}
2-strlen.c/     0           0     0     644     224       `
#include "main.h"
/**
 * _strlen - a function that returns
 * the length of a string.
 * @s: value of string pointer
 * Return: integer
 */
int _strlen(char *s)
{
	int a = 0;

	while (*(s + a) != '\0')
		a++;
	return (a);
}
2-strncpy.c/    0           0     0     644     382       `
#include "main.h"

/**
 * _strncpy - a function
 * that copies a string
 * @dest: pointer to destination
 * @src: pointer to source
 * @n: length to copy
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (i < n && *(src + i) != '\0')
	{
		*(dest + i) = *(src + i);
		i++;
	}
	while (i < n)
	{
		*(dest + i) = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     229       `
#include "main.h"
/**
 * _islower - A function
 * that checks for lowercase
 * character.
 * @c: character to check
 * Return: c
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     265       `
#include "main.h"
/**
 * _puts - a function that prints
 * a string, followed by a new line.
 * @str: pointer to the string
 * Return: void
 */
void _puts(char *str)
{
	int a = 0;

	while (*(str + a) != '\0')
	{
		_putchar(*(str + a));
		a++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     371       `
#include "main.h"

/**
 * _strcmp - a function that
 * compares two strings.
 * @s1: pointer to first string
 * @s2: pointer to second string
 * Return: length of longer string
 */

int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (*(s1 + i) != '\0' && *(s2 + i) != '\0')
	{
		if (*(s1 + i) != *(s2 + i))
			return (*(s1 + i) - *(s2 + i));
		i++;
	}

	return (0);
}

3-strspn.c/     0           0     0     644     358       `
#include "main.h"
/**
 * _strspn - a function that gets the
 * length of a prefix substring.
 * @s: intial segment
 * @accept: bytes to be accepted
 * Return: s
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0;
	char *p;

	while (*s)
	{
		p = accept;
		while (*p && *p != *s)
			p++;
		if (!*p)
			break;
		i++;
		s++;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     242       `
#include "main.h"
/**
 * _isalpha - A function
 * that checks for lowercase
 * or uppercase character.
 * @c: character to check
 * Return: c
 */
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     369       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - a function that searches
 * a string for any of a set of bytes.
 * @s: pointer to locate
 * @accept: bytes to accept
 * Return: s or NULL
 */
char *_strpbrk(char *s, char *accept)
{
	char *a;

	for (; *s != '\0'; s++)
		for (a = accept; *a != '\0'; a++)
		{
			if (*s == *a)
				return (s);
		}
	return (NULL);
}

5-strstr.c/     0           0     0     644     478       `
#include "main.h"
#include <stddef.h>
/**
 * _strstr - a function that
 * locates a substring.
 * @haystack: pointer to locate
 * @needle: what to locate
 * Return: needle or NULL
 */
char *_strstr(char *haystack, char *needle)
{
	if (*needle == '\0')
		return (haystack);
	while (*haystack != '\0')
	{
		char *h = haystack;
		char *n = needle;

		while (*n != '\0' && *h == *n)
		{
			h++;
			n++;
		}
		if (*n == '\0')
			return (haystack);
		haystack++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     218       `
#include "main.h"
/**
 * _abs - a function that computes
 * the absolute value of an integer.
 * @c: value to check
 * Return: integer
 */
int _abs(int c)
{
	if (c < 0)
	{
		return (-c);
	}
	else
	{
		return (c);
	}
}
9-strcpy.c/     0           0     0     644     218       `
#include "main.h"
/**
 * _abs - a function that computes
 * the absolute value of an integer.
 * @c: value to check
 * Return: integer
 */
int _abs(int c)
{
	if (c < 0)
	{
		return (-c);
	}
	else
	{
		return (c);
	}
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

